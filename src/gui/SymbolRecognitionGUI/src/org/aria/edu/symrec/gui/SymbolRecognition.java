/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.aria.edu.symrec.gui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.aria.edu.symrec.gui.SymbolCanvas.SymbolPoint;

/**
 *
 * @author alex
 */
public class SymbolRecognition extends javax.swing.JFrame {

    /**
     * Creates new form SymbolRecognition
     */
    public SymbolRecognition() {
        initComponents();
        
        symbolTrackerMap = new HashMap<String, List<List<SymbolPoint>>>();
        
        // set observation text area for symbol canvas
        symbolPad.setObsTextArea(symbolObservationText);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        symbolSelector = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        symbolSaveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        symbolObservationText = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        symbolPad = new org.aria.edu.symrec.gui.SymbolCanvas();
        jLabel3 = new javax.swing.JLabel();
        symbolClearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N

        symbolSelector.setMaximumRowCount(6);
        symbolSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "left_arrow", "right_arrow", "circle", "square", "infinity" }));

        jLabel1.setBackground(new java.awt.Color(145, 159, 174));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Select Symbol Type");

        symbolSaveButton.setText("Save");
        symbolSaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                symbolSaveButtonMouseClicked(evt);
            }
        });

        symbolObservationText.setEditable(false);
        symbolObservationText.setColumns(20);
        symbolObservationText.setRows(5);
        jScrollPane1.setViewportView(symbolObservationText);

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Observations");

        symbolPad.setBackground(new java.awt.Color(249, 247, 244));
        symbolPad.setName("symbolPad"); // NOI18N

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel3.setText("Draw symbol here");

        symbolClearButton.setLabel("Clear");
        symbolClearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                symbolClearButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(symbolPad, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(symbolSelector, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(symbolSaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(symbolClearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(75, 75, 75))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(symbolSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(symbolSaveButton)
                        .addGap(18, 18, 18)
                        .addComponent(symbolClearButton)
                        .addGap(93, 93, 93)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(symbolPad, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void symbolSaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_symbolSaveButtonMouseClicked
        // get the symbol from the symbolPad
        List<SymbolPoint> currentSymbol = symbolPad.getCurrentSymbol();
        if (currentSymbol != null) {
            // get the symbol name from the selector
            String symbolName = (String)symbolSelector.getSelectedItem();
            
            List<List<SymbolPoint>> symbolInstances = symbolTrackerMap.get(symbolName);
            if (symbolInstances == null) {
                symbolInstances = new ArrayList<List<SymbolPoint>>();
                symbolInstances.add(currentSymbol);
                
                symbolTrackerMap.put(symbolName, symbolInstances);
            }
            else {
                symbolInstances.add(currentSymbol);
            }
            
            String obsText = "Saved instance of symbol " + symbolName.toUpperCase() + ".\n";
            obsText += "We now have " + symbolInstances.size() + " instances.";
            
            symbolObservationText.setText(obsText);
        }
    }//GEN-LAST:event_symbolSaveButtonMouseClicked

    private void symbolClearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_symbolClearButtonMouseClicked
        // clear symbol pad and observation text
        symbolPad.clearSymbol();
        symbolObservationText.setText(null);
    }//GEN-LAST:event_symbolClearButtonMouseClicked
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SymbolRecognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SymbolRecognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SymbolRecognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SymbolRecognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SymbolRecognition().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton symbolClearButton;
    private javax.swing.JTextArea symbolObservationText;
    private org.aria.edu.symrec.gui.SymbolCanvas symbolPad;
    private javax.swing.JButton symbolSaveButton;
    private javax.swing.JComboBox symbolSelector;
    // End of variables declaration//GEN-END:variables

    private Map<String, List<List<SymbolPoint>>> symbolTrackerMap;
}
